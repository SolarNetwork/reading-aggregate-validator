buildscript {
	repositories {
		mavenCentral()
		maven { url = "https://plugins.gradle.org/m2/" }
	}
}

plugins {
    id 'java'
    id 'eclipse'
    id 'org.springframework.boot' version '3.5.4'
	id 'net.ltgt.errorprone' version '4.3.0'
	id 'org.graalvm.buildtools.native' version '0.11.0'
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'net.ltgt.errorprone'
apply plugin: 'org.graalvm.buildtools.native'

description = 'SolarNetwork Reading Aggregate Validator'
version = '1.0.0'
group = 's10k.tool'

base {
	archivesName = 'sn-reading-aggregate-validator'
}

repositories {
	mavenCentral()
}

dependencyManagement {
	imports {
		mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
	}
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

[
	compileJava,
	compileTestJava
].each() {
	it.options.release = 21
	it.options.compilerArgs += [
		"-Xlint:all",
		"-Xlint:-options",
		"-Xlint:-path",
		"-Xlint:-serial",
		"-Xlint:-this-escape",
		"-Xlint:-try",
		"-parameters"
	]
	it.options.encoding = "UTF-8"
	if (rootProject.hasProperty('failOnWarnings') && rootProject.failOnWarnings.toBoolean()) {
		it.options.compilerArgs += ["-Werror"]
	}
	it.options.errorprone.disable("InlineMeSuggester")
}
	
compileJava {
	it.options.errorprone.enabled = !(rootProject.hasProperty('errorProneDisabled') && rootProject.errorProneDisabled.toBoolean());
	it.options.compilerArgs += ["-Aproject=${project.group}/${project.name}"]
}

compileTestJava {
	options.compilerArgs += [
		"-Xlint:-serial",
		"-Xlint:-static",
		"-Xlint:-this-escape"
	]
	options.errorprone.disable("BadImport", "CheckReturnValue")
	it.options.errorprone.enabled = (rootProject.hasProperty('errorProneEnabledTest') && rootProject.errorProneEnabledTest.toBoolean());
}

jar.manifest {
	attributes('Implementation-Title': name,
	'Implementation-Version': version,
	'Built-By': System.getProperty('user.name'),
	'Built-JDK': System.getProperty('java.version'))
}


ext {
	bucket4jVersion = '8.14.0'
	commonsIoVersion = '2.20.0'
	picoCliVersion = '4.7.7'
	snCommonVersion = '4.0.0'
	snCommonWebJakartaVersion = '2.0.6'
	superCsvVersion = '2.4.0'
	threetenExtraVersion = '1.8.0'

	libraries = [
		// Test dependencies.
		mockito: 'org.mockito:mockito-core',
		mockitoJupiter: 'org.mockito:mockito-junit-jupiter'
	]
}

dependencies {
	implementation "info.picocli:picocli-spring-boot-starter:${picoCliVersion}"
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	
	implementation "net.sf.supercsv:super-csv:${superCsvVersion}"
	implementation "net.solarnetwork.common:net.solarnetwork.common:${snCommonVersion}"
	implementation "net.solarnetwork.common:net.solarnetwork.common.web.jakarta:${snCommonWebJakartaVersion}"
	implementation 'org.apache.httpcomponents.client5:httpclient5'
    implementation "org.threeten:threeten-extra:${threetenExtraVersion}"
	
	
	testImplementation libraries.mockito,
			libraries.mockitoJupiter,
			'org.junit.jupiter:junit-jupiter-api',
			'org.junit.jupiter:junit-jupiter',
			'org.junit.platform:junit-platform-launcher'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	
	annotationProcessor "info.picocli:picocli-codegen:${picoCliVersion}"
	
	errorprone 'com.google.errorprone:error_prone_core:2.41.0'
}

configurations {
	all*.exclude group: 'commons-logging'
	all {	
		resolutionStrategy {
			// the following are to pick up security fixes in transitive dependencies
			force "commons-io:commons-io:${commonsIoVersion}"
		}
		resolutionStrategy.eachDependency { DependencyResolveDetails details ->
			if (details.requested.group == 'software.amazon.awssdk') {
				details.useVersion "${awsSdk2Version}"
			}
		}
	}
}
	
pluginManager.withPlugin('eclipse') { 
	eclipse {
		jdt {
			javaRuntimeName = 'JavaSE-21'
			file {
				withProperties { properties ->
					// set properties for the file org.eclipse.jdt.core.prefs to enable -parameters for Spring 6
					properties['org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode'] = 'enabled'
					properties['org.eclipse.jdt.core.compiler.codegen.methodParameters'] = 'generate'
				}
			}
		}
	}
}
    
test {
	useJUnitPlatform()
	testLogging {
		exceptionFormat = 'full'
		showExceptions = true
		showCauses = true
		showStackTraces = true
	}
	maxHeapSize = '1500m'
}
